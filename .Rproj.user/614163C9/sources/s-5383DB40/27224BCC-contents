---
title: "Wrangling review and a few new things"
author: "Allison Horst"
output: html_document
---

### Objectives

- Reminders of reproducible workflows
- Review some data wrangling basics (dplyr & tidyr)
- Introduce a couple new functions (separate, unite, drop_na, rename, relocate)
- Remember ggplot?
- A map in R

### Setup

- **Fork** this repo from GitHub (allisonhorst/esm244-w2021-lab1)
- Clone to create a version controlled R project 
- Create a new folder in the project called `lab_1_yourinitials` (e.g. mine will be `lab_1_ah`)
- Within that folder, create a new RMarkdown document in which you'll complete this lab

### Attach packages

In the setup chunk in your RMarkdown document, attach the following packages:

  - `tidyverse`
  - `here`
  - `sf`
  - `tmap`

*Note: you may need to install these packages if you don't already have them (recall: `install.packages("packagename")`) 

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(here)
library(sf)
library(tmap)
```

### Read in the data

The data you'll use (to start) is within the `data/sf_trees` subfolder. Use the `here` package to read in the `sf_trees.csv` file. 

```{r}
sf_trees <- read_csv(here("data","sf_trees","sf_trees.csv"))
```

About the data: SF trees data are from the [SF Open Data Portal](https://data.sfgov.org/City-Infrastructure/Street-Tree-List/tkzw-k3nq). See more information from Thomas Mock and TidyTuesday [here](https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-01-28).

Check out the data using exploratory functions (e.g. `View()`, `names()`, `summary()`, etc.). Remember that those probably do **not** belong in your .Rmd code chunks (if you don't need a record, you can either comment it out or put it in the Console).

### Part 1: Wrangling & ggplot review

**Example 1:** Find counts of observations by `legal_status` & wrangle a bit:
```{r}
# Way 1: group_by %>% summarize %>% n
sf_trees %>% 
  group_by(legal_status) %>% 
  summarize(tree_count = n())

# Way 2: Same thing (+ a few other dplyr functions)
top_5_status <- sf_trees %>% 
  count(legal_status) %>% 
  drop_na(legal_status) %>% 
  rename(tree_count = n) %>% 
  relocate(tree_count) %>% 
  slice_max(tree_count, n = 5) %>% 
  arrange(-tree_count)
```

Make a graph of top 10 from above: 
```{r}
ggplot(data = top_5_status, aes(x = fct_reorder(legal_status, tree_count), y = tree_count)) +
  geom_col() +
  labs(y = "Tree count", x = "Legal Status") +
  coord_flip() +
  theme_minimal() 
```

**Example 2:** Only keep observations where legal status is `Permitted Site` and caretaker is `MTA`. Store as permitted_mta.

```{r}
permitted_mta <- sf_trees %>% 
  filter(legal_status == "Permitted Site", caretaker == "MTA")
```


**Example 3:** Only keep Blackwood Acacia trees, then only keep columns `legal_status`, `date`, `latitude` and `longitude`. Store as `blackwood_acacia`.

The `stringr` package contains a bunch of useful functions for finding & working with strings (e.g. words). One is `str_detect()` to detect a specific string within in a column.

```{r}
blackwood_acacia <- sf_trees %>% 
  filter(str_detect(species, "Blackwood Acacia")) %>% 
  select(legal_status, date, latitude, longitude)

# Make a little graph of locations (note R doesn't know these are spatial)
ggplot(data = blackwood_acacia, aes(x = longitude, y = latitude)) + 
  geom_point()
```
**Example 4:** Meet `tidyr::separate()`

Separate the `species` column into two separate columns: `spp_scientific` and `spp_common`

```{r}
sf_trees_sep <- sf_trees %>% 
  separate(species, into = c("spp_scientific", "spp_common"), sep = " :: ")
```

**Example 5:** Meet `tidyr::unite()`

Yeah, it does the opposite. Unite the `tree_id` and `legal_status` columns, using a separator of "_COOL_" (no, you'd never actually do this...).

```{r}
ex_5 <- sf_trees %>% 
  unite("id_status", tree_id:legal_status, sep = "_COOL_")
```

#### Stage, commit, pull, push to GitHub!

### Part 2: Make some actual maps

You need `sf` and `tmap` successfully attached to do this part. We'll convert lat/lon to spatial data (see that now there's a column called `geometry`), then we can use `geom_sf()` to plot. 

**Step 1:** Convert the lat/lon to spatial points

Use `st_as_sf()` to convert to spatial coordinates: 

```{r}
blackwood_acacia_sp <- blackwood_acacia %>% 
  drop_na(longitude, latitude) %>% 
  st_as_sf(coords = c("longitude","latitude")) # Convert to spatial coordinates

# But we need to set the coordinate reference system (CRS) so it's compatible with the street map of San Francisco we'll use as a "base layer":
st_crs(blackwood_acacia_sp) = 4326

# Then we can use `geom_sf`!

ggplot(data = blackwood_acacia_sp) +
  geom_sf(color = "darkgreen") +
  theme_minimal()
  
```

But that's not especially useful unless we have an actual map of SF to plot this on, right? 

Read in the SF shapefile (data/sf_map/tl_2017_06075_roads.shp): 
```{r}
sf_map <- read_sf(here("data","sf_map","tl_2017_06075_roads.shp"))

st_transform(sf_map, 4326)

ggplot(data = sf_map) +
  geom_sf()
```

Now combine them: 
```{r}
ggplot() +
  geom_sf(data = sf_map,
          size = 0.1,
          color = "darkgray") +
  geom_sf(data = blackwood_acacia_sp, 
          color = "red", 
          size = 0.5) +
  theme_void() +
  labs(title = "Blackwood acacias in San Francisco")
```

### Now an interactive one! 

```{r}
tmap_mode("view")

tm_shape(blackwood_acacia_sp) + 
  tm_dots()
```

### Wrap up: 

Make sure you stage, commit, pull, then push back to GitHub. Done! 


## END Lab 1
